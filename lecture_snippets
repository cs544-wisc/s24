Lecture 36 (Apr 24):

Dataset source: https://ms.sites.cs.wisc.edu/cs544/s24/schedule.html
Other useful resources:
https://console.cloud.google.com/marketplace
https://developers.google.com/identity/protocols/oauth2/scopes
https://cloud.google.com/sustainability/region-carbon
https://cloud.google.com/bigquery/pricing#on_demand_pricing

Queries:

SELECT geo_id, county_name FROM `bigquery-public-data.geo_us_boundaries.counties` LIMIT 10

SELECT geo_id, county_name 
FROM `bigquery-public-data.geo_us_boundaries.counties` 
WHERE county_name = 'Dane'

SELECT counties.geo_id, county_name, states.state_name
FROM `bigquery-public-data.geo_us_boundaries.counties` AS counties
INNER JOIN `bigquery-public-data.geo_us_boundaries.states` AS states
ON counties.state_fips_code = states.state_fips_code
WHERE states.state_name = "Wisconsin"
LIMIT 100

Jupyter / VM setup:

pip3 install google-cloud-bigquery google-cloud-bigquery-storage pyarrow tqdm ipywidgets pandas matplotlib db-dtypes pandas-gbq
gcloud auth application-default login --scopes=openid,https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/drive.readonly
gcloud auth application-default revoke
python3 -m jupyterlab --no-browser
%load_ext google.cloud.bigquery

Lecture 31 (Apr 12):

docker build . -t kafka-demo
docker run -d --name=broker -p 4040:4040 -p 5000:5000 -v `pwd`/nb:/nb kafka-demo
docker exec -d broker python3 -m jupyterlab --no-browser --ip=0.0.0.0 --port=5000 --allow-root --NotebookApp.token=''

________________________________________________________________________________

Lecture 30 (Apr 10):

docker exec -it demo-db-1 bash
nodetool status
nodetool ring (16 vnodes per physical node)
cqlsh demo-db-1
	use banking;
	SELECT * FROM loans;
	SELECT bank_id, token(bank_id) FROM loans;
	SELECT writetime(bank_id) FROM loans;
	SELECT writetime(state) FROM loans;
	UPDATE loans SET state = 'IL' where bank_id = 999 AND amount = 500 AND loan_id = d41208b0-f37c-11ee-b615-a9b057ea565d;
	SELECT writetime(state) FROM loans;
________________________________________________________________________________

Lecture 27 (Apr 3):

docker build . -t cassandra-demo
docker exec -it demo-db-1 bash

nodetool status
nodetool ring
cqlsh
cqlsh demo-db-1
	help 
	help describe
	describe keyspaces
	# below command wouldn't work 
	create keyspace banking with replication = {'class': 'SimpleStrategy', "replication_factor": 3}; 
	create keyspace banking with replication = {'class': 'SimpleStrategy', 'replication_factor': 3};
	describe keyspaces
	describe tables
	use banking;
	describe tables

docker exec -d <CONTAINER> python3 -m jupyterlab --no-browser --ip=0.0.0.0 --port=5000 --allow-root --NotebookApp.token=''
________________________________________________________________________________

Lecture 21 (Mar 13):

docker build . -t spark-demo
docker compose up -d

SSH tunnel:
ssh <USER>@IP -L localhost:5000:localhost:5000 -L localhost:4040:localhost:4040
________________________________________________________________________________

Lecture 18 (Mar 6):

docker build . -f hdfs.Dockerfile -t p4-hdfs
docker build . -f notebook.Dockerfile -t p4-nb

docker compose up -d

docker exec -it <HDFS CONTAINER NAME> bash
which hdfs
hdfs
hdfs namenode --help
hdfs namenode -fs hdfs://main:9000 -format
hdfs namenode -fs hdfs://main:9000 &> /tmp/nn.txt &
tail -f /tmp/nn.txt
hdfs dfsadmin -fs hdfs://main:9000 -report  
hdfs datanode -fs hdfs://main:9000 &> /tmp/dn.txt &
hdfs dfsadmin -fs hdfs://main:9000 -report  
________________________________________________________________________________

Lecture 17 (Mar 4):

MySQL setup:
pip3 install SQLAlchemy mysql-connector-python

docker pull mysql
docker run -d -m "1g" -p 127.0.0.1:3306:3306 -e MYSQL_DATABASE=cs544 -e MYSQL_ROOT_PASSWORD=abc mysql

docker exec -it <CONTAINER NAME> bash

mysql -p cs544
help
show tables;
drop table users;
select * from users;
select * from accounts;
________________________________________________________________________________

Lecture 14 (Feb 23):

sudo apt-get install python3-pip
pip3 install grpcio==1.58.0 grpcio-tools==1.58.0

Command to generate python code using proto file:

python3 -m grpc_tools.protoc -I=. --python_out=. --grpc_python_out=. ????.proto

________________________________________________________________________________

Lecture 12 (Feb 19):

Docker run:
docker run -d -p 127.0.0.1:5440:5440 -v ./nb:/nb -m 512m pyarrow

Process memory usage:
cd /proc
ls
cd <pid>
cat maps
cat maps | grep test.arrow

Add swap space (caching for anonymous data):
sudo fallocate -l 1G /swapfile
sudo chmod g-r /swapfile
sudo chmod o-r /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo swapoff /swapfile
________________________________________________________________________________

Lecture 6 (Feb 5):

docker build . -t pytorch
docker run -d -p 127.0.0.1:5440:5440 -v ./nb:/nb pytorch

ssh USER@IP -L localhost:5440:localhost:5440

________________________________________________________________________________

Lecture 4 (Jan 31):

Installs
apt-get update
apt-get install unzip # python3 python3-pip
pip install pandas==2.1.0 --break-system-packages

Jupyter
pip3 install jupyterlab==4.0.3 --break-system-packages
python3 -m jupyterlab --no-browser --ip=0.0.0.0 --port=5440 --allow-root --NotebookApp.token=''
docker run -p 127.0.0.1:5440:5440 IMAGE
ssh USER@IP -L localhost:5440:localhost:5440

________________________________________________________________________________

Lecture 2 (Jan 26):

https://pages.cs.wisc.edu/~harter/cs544/data/ghcnd-stations.txt 

https://code.visualstudio.com/ 
https://code.visualstudio.com/docs/remote/ssh 
